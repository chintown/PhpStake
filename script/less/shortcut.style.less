@dev: 0;
* { .dev-border(@dev); }
.dev-color (@dev, @color) when (@dev = 1) {background-color: @color;}
.dev-color (@dev, @color) when (@dev = 0) {}
.dev-border (@dev) when (@dev = 1) {border: double 1px black;}
.dev-border (@dev) when (@dev = 0) {}
.dev-border-high (@dev, @color, @width) when (@dev = 1) {border: double @width @color;}
.dev-border-high (@dev, @color, @width) when (@dev = 0) {}

// COLOR / FONT THEME ---------------------------------------------------------
@hotpink: #C25283;
@blue: #153E7E;
@gray: #6D6968;
@red: #E42217;
@cyan: #50EBEC;
@purlple: #842DCE;
@gold: gold;
@tan: #97694F;
@icecream: #FFF8C6;


@color-cold: rgba(0, 136, 204, 1);
@color-cold-light: rgba(0, 136, 204, 0.4);
@color-warm: rgba(255, 165, 0, 1);
@color-warm-light: rgba(255, 165, 0, 0.4);


.property_(@property, @value) {
  _: 0 ~"; @{property}:" @value;
}

.vendor(@property, @value) {
  .property_('-webkit-@{property}', @value);
  .property_( '-khtml-@{property}', @value);
  .property_(   '-moz-@{property}', @value);
  .property_(          @property,   @value);
}

.transform(@size) {
  -webkit-transform: @size;
  -moz-transform: @size;
  transform: @size;
}
.animation(@size) {
  -webkit-animation: @size;
  -moz-animation: @size;
  animation: @size;
}
.radius(@size) {
  -webkit-border-radius: @size;
  -moz-border-radius: @size;
  border-radius: @size;
}
.box-shadow(@params) {
  -webkit-box-shadow: @params;
  -moz-box-shadow: @params;
  box-shadow: @params;
}
.box-sizing(@param) {
  -moz-box-sizing: @param;
  box-sizing: @param;
}
.text-shadow(@params) {
  -webkit-text-shadow: @params;
  -moz-text-shadow: @params;
  text-shadow: @params;
}
.linear-gradient-vertical-3 (@color1, @color2, @color3) {
  .linear-gradient-vertical-3-w-pos (@color1, 0, @color2, 50%, @color3, 100%);
}
.linear-gradient-vertical-3-w-pos (@color1, @pos1, @color2, @pos2, @color3, @pos3) {
  background: -moz-linear-gradient(top,  @color1 @pos1, @color2 @pos2, @color3 @pos3); /* FF3.6+ */
  background: -webkit-gradient(linear, left top, left bottom, color-stop(@pos1,@color1), color-stop(@pos2,@color2), color-stop(@pos3,@color3)); /* Chrome,Safari4+ */
  background: -webkit-linear-gradient(top,  @color1 @pos1,@color2 @pos2,@color3 @pos3); /* Chrome10+,Safari5.1+ */
  background: -o-linear-gradient(top,  @color1 @pos1,@color2 @pos2,@color3 @pos3); /* Opera 11.10+ */
  background: -ms-linear-gradient(top,  @color1 @pos1,@color2 @pos2,@color3 @pos3); /* IE10+ */
  background: linear-gradient(to bottom,  @color1 @pos1,@color2 @pos2,@color3 @pos3); /* W3C */
}
.alpha(@ratio) {
    @ratio-ie: @ratio * 100;
    /* IE 8 */
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=@ratio-ie)";
    /* IE 5-7 */
    filter: alpha(opacity=@ratio-ie);
    /* Netscape */
    -moz-opacity: @ratio;
    /* Safari 1.x */
    -khtml-opacity: @ratio;
    /* Good browsers */
    opacity: @ratio;
}
.blur(@radius){
  // http://demosthenes.info/blog/534/Cross-browser-Image-Blur-with-CSS
  filter: blur(@radius * 1px); /* Someday, sigh ... */
  -webkit-filter: blur(@radius * 1px); /* Prefixed CSS3 blur filters */
  -moz-filter: blur(@radius * 1px);
  -o-filter: blur(@radius * 1px);
  -ms-filter: blur(@radius * 1px);
  filter: url(../svg/blur.svg#blur); /* Firefox needs SVG */
  filter:progid:DXImageTransform.Microsoft.Blur(PixelRadius=@radius); /* IE lte 9 */
}
.bold {font-weight: bolder;}
.hide {display: none;}
.invisible {visibility: hidden}
.shadow(@color) {text-shadow: @color 0em 0em 0.2em;}
/* http://mattsnider.com/css-string-truncation-with-ellipsis/ */
.ellipsis {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  -o-text-overflow: ellipsis;
  /*-moz-binding: url("/editor/xml/ellipsis.xml#ellipsis");*/
}
.glow {
  background-color: transparent;
  -webkit-box-shadow: #ccc 4px 0 10px,#ccc -4px 0 10px,#aaa 0 38px 36px -24px;
  -moz-box-shadow: #ccc 4px 0 10px,#ccc -4px 0 10px,#aaa 0 38px 36px -24px;
  box-shadow: #ccc 4px 0 10px,#ccc -4px 0 10px,#aaa 0 38px 36px -24px;
}
.input-display-only {
  border: none;
}
.debug {
  border-style:none; position: relative; padding: 2px;
  font-size: 14px; font-weight: bold;
  background-color: #616D7E; color: white; /*Slate Gray4*/
}

.image-cover {
  background-size: cover;
  background-position: center center;
  background-repeat: no-repeat;
}
.image-contain {
  background-size: contain;
  background-position: center center;
  background-repeat: no-repeat;
}

.component-inner-separator(@item-selector, @sep-selector, @sep-mixin) {
  // http://stackoverflow.com/questions/11551313/less-css-pass-mixin-as-a-parameter-to-another-mixin
  // http://stackoverflow.com/questions/13266828/css-less-adding-a-variable-to-the-selector
  @{item-selector} {
    &:not(:last-of-type) {
      &@{sep-selector} {
        @sep-mixin();
      }
    }
  }
}

.component-horizontal-scroll(@item-selector, @height, @item-mixin) {
  max-height: unit(@height, px);
  white-space: nowrap;
  overflow-x: scroll;
  overflow-y: hidden;
  -webkit-overflow-scrolling: touch;
  @{item-selector} {
    display: inline-block;
    position: relative;
    height: @height;
    @item-mixin();
  }
}

//http://jsfiddle.net/axrwkr/eaefL/
.component-centered-responsive-tiles-iter(@width, @count) when (@count > 0) {
  .component-centered-responsive-tiles-iter(@width, (@count - 1));
  @fit-width: unit((@width * @count + @padding * (@count + 1)), px);
  @media (min-width: @fit-width) {
    width: @fit-width;
  }
}
.component-centered-responsive-tiles(@item-selector, @max-num, @width, @height, @padding, @item-mixin) {
  display: table;
  margin-left: auto;
  margin-right: auto;
  @{item-selector} {
    display: inline-block;
    width: @width;
    height: @height;
    margin: @padding;
    margin-right: 0;
    @item-mixin();
  }
  padding-right: @padding;
  .component-centered-responsive-tiles-iter(@width, @max-num);
  @min-width: unit((@width * 1 + @padding * (1 + 1)), px);
  @media (max-width: @min-width) {
    width: 90%;
    @{item-selector} {
      width: 100%;
      margin-left: 0;
    }
  }
}